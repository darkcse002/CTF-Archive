from Crypto.Util.number import *
from gmpy2 import iroot
from math import gcd

def nextPrime(p, n):
    '''
    -(nk+q) %n = -q % n = n-q = n - p%n
    q = p + k*n - p%n + 1
    p*q = p*(p+k*n + (- p%n) + 1)
        = p^2 + p*(k*n + c)
    -p%n = -N % n
    delta = (k*n + c)^2 -4*N
    p = -((k*n+c) - sqrt())/2
    '''
    p += (n - p) % n
    p += 1
    iters = 0
    while not isPrime(p):
        p += n
    return p
def factorial(n):
    if n == 0:
        return 1
    return factorial(n-1) * n
p = getPrime(512)
q = nextPrime(p,factorial(90))
'''
138963980427736364646203557164328211078134463518489686365728312873583832517087170768576679472472907142081360480944201759920246566585465801088226164314480607014663211599932950864391702460227584467326051919881067028851940610382044445003060103566003934601979805899293539507221062915314813557293919231917284247667 
65537 
26363325527372681448374836719361674028908733933823971039273016094221739663363697355984980560218941405351917768372297139270315950803631724328547161889191685480725185971092638691575587334307068143724069148715129866085595445974433311000459043513392513632639058879350662222598941781017396217632160254074487773693
'''
N = 172391551927761576067659307357620721422739678820495774305873584621252712399496576196263035396006999836369799931266873378023097609967946749267124740589901094349829053978388042817025552765214268699484300142561454883219890142913389461801693414623922253012031301348707811702687094437054617108593289186399175149061 
e = 65537 
flag = 128185847052386409377183184214572579042527531775256727031562496105460578259228314918798269412725873626743107842431605023962700973103340370786679287012472752872015208333991822872782385473020628386447897357839507808287989016150724816091476582807745318701830009449343823207792128099226593723498556813015444306241
N = 138963980427736364646203557164328211078134463518489686365728312873583832517087170768576679472472907142081360480944201759920246566585465801088226164314480607014663211599932950864391702460227584467326051919881067028851940610382044445003060103566003934601979805899293539507221062915314813557293919231917284247667
e = 65537
flag = 26363325527372681448374836719361674028908733933823971039273016094221739663363697355984980560218941405351917768372297139270315950803631724328547161889191685480725185971092638691575587334307068143724069148715129866085595445974433311000459043513392513632639058879350662222598941781017396217632160254074487773693
n = factorial(90)
c = -N % n + 1
k = 0
while True:
    delta = (k*n + c)**2 + 4*N
    if iroot(delta,2)[1] == True:
        print(k)
        break
    k = k + 1
k = 13
delta = (k*n + c)**2 + 4*N
p = -((k*n+c) - iroot(delta,2)[0])//2
q = N // p
assert p*q == N
phi = (p-1)*(q-1)
d = pow(e,-1,phi)
c = pow(flag,d,N)
from Crypto.Util.number import long_to_bytes
print(long_to_bytes(c))